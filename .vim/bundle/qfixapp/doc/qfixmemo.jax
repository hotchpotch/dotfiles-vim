*qfixmemo.jax*	For Vim バージョン 7.2	Last change: 2011 August 23
 >
==============================================================================
       Description: QFixMemo
            Author: fuenor <fuenor@gmail.com>
            Web(Japanese):
            http://sites.google.com/site/fudist/Home
            http://sites.google.com/site/fudist/Home/qfixdev/ver3
==============================================================================

CONTENTS						*qfixmemo-contents*
1. Intro                                                |qfixmemo-intro|
  1.2 QFixHowmとの違い                                  |qfixmemo-qfixhowm|
  1.3 qfix_memoファイルタイプ                           |qfixmemo-qfix_memo|
2. インストール                                         |qfixmemo-settings|
3. メモファイルを開く                                   |qfixmemo-file|
  3.1 クイックメモ                                      |qfixmemo-quickmemo|
  3.2 ペアファイル                                      |qfixmemo-pairfile|
  3.3 シンタックスハイライト                            |qfixmemo-syntax|
  3.4 メモファイル削除                                  |qfixmemo-delete|
4. エントリ一覧                                         |qfixmemo-entry-list|
  4.1 エントリ一覧のオプション                          |qfixmemo-entry-list-option|
  4.2 MRUリスト                                         |qfixmemo-entry-list-mru|
  4.3 全エントリ一覧                                    |qfixmemo-entry-list-all|
5. 検索                                                 |qfixmemo-grep|
  5.1 Quickfixウィンドウの編集                          |qfixmemo-quickfix-edit|
  5.2 エントリフィルタと連結表示                        |qfixmemo-entry-filter|
6. ランダム表示                                         |qfixmemo-random|
7. フォールディング                                     |qfixmemo-folding|
8. ローカルバッファコマンド                             |qfixmemo-local-commands|
9. ファイルリネーム                                     |qfixmemo-rename|
10. 予定・TODO                                          |qfixmemo-schedule|
11. カスタマイズ                                        |qfixmemo-customize|
  11.1 新規メモのテンプレート                           |qfixmemo-template|
    11.1.2 タイトルマーカーとタイトル検索の正規表現     |qfixmemo-title|
    11.1.3 タイトル検索の正規表現                       |qfixmemo-title-regxp|
  11.2 キーマップ                                       |qfixmemo-user-keymap|
  11.3 保存前処理                                       |qfixmemo-pre-save|
  11.4 ファイルタイプの指定                             |qfixmemo-filetype|
  11.5 シンタックスハイライト                           |qfixmemo-syntax-highlight|
  11.6 複数のQFixMemoディレクトリ                       |qfixmemo-chenv|
  11.7 calendar.vim                                     |qfixmemo-calendar|

==============================================================================
1. Intro						*qfixmemo-intro*

QFixMemoはメモを簡単に取り、アクセスするためのプラグインです。
細かいことを気にすることなくメモや日記、日報を作成することが出来ます。
メモの書式は極めてシンプルですので、好みの書式と自由に組み合わせて使用すること
もできます。

"Note"
<Leader>と<LocalLeader>は g:qfixmemo_mapleaderで定義されます。
デフォルトは g, なので、<Leader>c は g,c になります。
以降は<Leader>を読み替えてください。

QFixMemoのコマンドやオプションはほぼQFixHowm互換ですので、チュートリアルについ
てはQFixHowmのものを参照してみてください
QFixHowm クイックスタートガイド:
http://sites.google.com/site/fudist/Home/qfixhowm/quick-start

QFixMemoは内部でQFixGrepを使用しています。
ウィンドウ周りのオプションやgrepの詳しい設定については以下を参照してください。
http://sites.google.com/site/fudist/Home/grep

1.2 QFixHowmとの違い					*qfixmemo-qfixhowm*

QFixMemoはQFixHowmをよりシンプルにリファクタリングしたプラグインです。

予定・TODO部分にはQFixHowmのソースを流用しているため、オプション設定がほぼその
まま使えますが、メモファイル名等のオプションは若干異なります。 >

このファイルがQFixHowmとして配布されている場合、plugin/env-conv.vimでQFixHowm
のオプションがQFixMemoのオプションにコンバートされます。不要な場合は.vimrcで無
効化してください。 >
    " QFixHowmとのオプションコンバートを行わない
    let QFixHowm_Convert = 0

逆にこのファイルがQFixMemoとして配布されていてQFixHowmとオプション互換にしたい
場合はmisc/env-conv.vimをpluginディレクトリへコピーしてください。

基本的な使用方法はQFixHowm(howm)と同じですが、QFixHowmはhowm-mode.vimへのパッ
チから開発を始めた関係で構造が煩雑になっています。
またQFixHowmには実験的なオプションやコマンドも多いため、わかりにくいところがあ
ります。
このためQFixMemoではシンプルな機能だけに絞って、またhowm形式べったりではなく自
由な書式を扱えるように、できるだけユーザが自由にカスタマイズできるプラグインを
目指して開発しています。

QFixHowmとして使用する場合の大きな違いはメモファイルの拡張子の扱いにあります。
Ver.3ではhowm_filename等で指定したファイル名の拡張子は"無視"され、常に
QFixHowm_FileExtが使用されます。
(QFixHowm_FileExtがない場合は howm_filenameから生成されます)

拡張子をmkdにする例 >
  " ファイル拡張子をmkdにする
  let QFixHowm_FileExt = 'mkd'

同様にVer.3でのファイルタイプ切替はQFixHowm_FileTypeのみで変更可能です。 >
  " ファイルタイプをmarkdownにする
  let QFixHowm_FileType = 'markdown'

ファイルタイプは明示的に指定することも可能ですが、拡張子から自動設定させること
も出来ます。

拡張子からファイルタイプを指定する設定 >
  " 拡張子が'mkd'ならファイルタイプは'markdown'になります
  let QFixHowm_FileType = ''

1.3 qfix_memoファイルタイプ				*qfixmemo-qfix_memo*

ファイルタイプに qfix_memo を設定すると以下とほぼ同等のシンタックスハ
イライトが有効になります。
http://sites.google.com/site/fudist/Home/qfixhowm/option/outline-mode#user-syntaxfile

ファイルタイプに qfix_memoを指定する例 >
  let QFixHowm_FileType = 'qfix_memo'

予定・TODO等のシンタックスハイライトはビルトインになったため、howm_memo.vimは
qfixapp内のsyntaxディレクトリにコピーすることも出来ます

==============================================================================
2. インストール						*qfixmemo-settings*

最低限必要なのはダウンロードしたファイルを解凍して作成されたディレクトリにラン
タイムパスを通すことだけですが、メモの保存ディレクトリとファイルエンコーディン
グは指定した方がよいでしょう。

以降はディレクトリをqfixmemoとリネームしたとして解説を行いますので適宜読み替え
てください。

.vimrc >
    " ランタイムパスを通す
    set runtimepath+=path/to/qfixmemo
    " メモファイルの保存先
    let qfixmemo_dir           = '~/qfixmemo'

Windows: >
    " メモファイルのファイルエンコーディング
    let qfixmemo_fileencoding  = 'cp932'
    " メモファイルのファイルフォーマット(改行コード)
    let qfixmemo_fileformat    = 'dos'
Unix: >
    " メモファイルのファイルエンコーディング
    let qfixmemo_fileencoding  = 'utf-8'
    " メモファイルのファイルフォーマット(改行コード)
    let qfixmemo_fileformat    = 'unix'
<
"Note"
Windowsでファイルエンコーディングを 'utf-8' に設定したい場合は別途grepを用意し
て設定を行う必要があります。
http://sites.google.com/site/fudist/Home/grep/install
ファイルフォーマット(改行コード)についてはWindowsでも 'unix' に設定可能です。

予定・TODOにはQFixHowmのソースがそのまま使用されていますので、タイムスタンプ
フォーマットはなるべくデフォルトのままか - を / に変える程度で使用して下さい。
またWindowsのデフォルトで使用されるfindstrは正規表現の関係で制限があり、タイム
スタンプフォーマットを変更すると検索できなくなる事があります。

タイムスタンプ: >
  let g:qfixmemo_timeformat = '[%Y-%m-%d %H:%M]'

  " タイムスタンプフォーマットの日付部分を変更する場合 QFixHowm_DatePatternも
  " 変更する必要があります。
  let g:qfixmemo_timeformat  = '[%Y/%m/%d %H:%M]'
  let g:QFixHowm_DatePattern = '%Y/%m/%d'

==============================================================================
3. メモファイルを開く					*qfixmemo-file*

メモファイルを開くにはいくつかコマンドがありますが、基本的にはファイル名が違う
だけです。
新規ファイルは秒数を含む時刻から、クイックメモは常に同じファイル、日記は同日な
ら同じファイルが開かれます。

<Leader>c           新規ファイル作成
<Leader>u           クイックメモを開く
<Leader><Space>     日記を開く
<Leader>C           ファイル名を指定して新規ファイル作成

メモファイルのファイル名は変更可能です。

<Leader>c           let qfixmemo_filename  = '%Y/%m/%Y-%m-%d-%H%M%S'
<Leader>u           let qfixmemo_quickmemo = 'Qmem-00-0000-00-00-000000'
<Leader><Space>     let qfixmemo_diary     = 'diary/%Y-%m-%d'

ファイル名には |strftime()|で使用可能な文字列が設定できます。

新規ファイルを開くと = で始まる行がテンプレートとして挿入されます。
この行がタイトル行ですので、適当なタイトルを入力してメモを書いてください。
タイトルを付けるのが面倒なら<CR>を押して本文から書きます。
保存時にタイトル行が空ならタイトルは本文から適当に作成されます。

テンプレートはqfixmemo_templateで定義可能です。
詳しくは 11.1章の「新規メモのテンプレート」|qfixmemo-template|を参照して下さい。

"Note"
<Leader>cではカウント指定で qfixmemo_filename, qfixmemo_filename1, ...を使用さ
れます。特定のファイルだけ特定のディレクトリにメモを取りたい場合に使用します。

"Note"
メモファイル中に [[キーワード]] のように [[ と ]] でWikiスタイルのキーワードを
作成するとオートリンク化され、キーワード上で<CR>を押すと対応するファイルを開く
ことが出来ます。
キーワードは保存時に自動作成されますが、全ファイルを検索して再作成が可能です。
不要なキーワードを削除した場合などは再作成してください。

<Leader>rk           キーワードファイルを再作成

------------------------------------------------------------------------------
3.1 クイックメモ					*qfixmemo-quickmemo*

<Leader>u           qfixmemo_quickmemo, qfixmemo_quickmemo1, ...を開く
<Leader>U           使用ファイル名をqfixmemo_quickmemoにリセット

クイックメモではカウント指定が可能です。

2g,u などとして実行時にカウント指定すると qfixmemo_quickmemo2 のように対応する
ファイル名のクイックメモが開かれ、以降は g,u を使用すると一番最後に指定された
クイックメモが開かれます。
クイックメモは g,U でデフォルト(qfixmemo_quickmemo)に戻すことが出来ます。

------------------------------------------------------------------------------
3.2 ペアファイル					*qfixmemo-pairfile*

<Leader>j           let qfixmemo_pairfile_dir = 'pairfile'

ペアファイルは特定ファイルに関連付けられたメモです。
例えば現在 public.cppというソースファイルを編集していて public.cppに対するメモ
を書き込みたいのだけれど public.cpp自体は公開されるものなので個人的なメモを書
き込みにくい、というような場合です。このような時 <Leader>,j で現バッファとリン
クされたメモファイルを開いてメモしておくことが出来ます。

ペアファイルは qfixmemo_dir内の qfixmemo_pairfile_dirに作成されます。
このメモファイルには 'cpp'（対応元のファイルタイプ）メモファイル両方のファイル
タイプが適用されるので、ソースからコピー＆ペーストした場合、ソース元と同じシン
タックスで表示されます。

------------------------------------------------------------------------------
3.3 シンタックスハイライト				*qfixmemo-syntax*

ファイルタイプ'qfix_memo'には以下のようなシンタックスハイライ
トが定義されています。
(:set ft=qfix_memo を実行すると実際のハイライト表示が確認できます) >
  :set ft=qfix_memo

* この行はレベル1の見出し行です

行頭の * の数で見出しのレベルを変更できます。

** [vim] この行はレベル2の見出し行です

見出し行では [hoge] のようなカテゴリ表記も使えます。

*** この行はレベル3の見出し行です

カテゴリ表記のシンタックス指定には'contains'指定があるので、
見出し行以外の [vim] のような文字列はハイライトされません。

1. 数値形式の見出し行

見出し行には数値形式も使用できます。

> メールライクな引用
> 行頭の'>'の後に空白か改行が必要です。

+ リスト1
+ 行頭が'-'か'+'で始まるとリスト
+ リスト3 : (空白文字)+':'以降はノーマル表示

表 (行頭が'|'で始まる表。セル内が' *'で始まると項目名)
| *名前  | *アドレス |
| Google | http://www.google.co.jp |

:定義リスト : 行頭の':'と(空白文字)+':'で始める

区切り線
------------------------------------------------------------
============================================================

------------------------------------------------------------------------------
3.4 メモファイル削除					*qfixmemo-delete*

メモファイルはバッファの内容を削除して保存すると削除されます。
またQuickfixウィンドウ上で D コマンドを実行してもファイル削除可能ですが、一ファ
イル複数エントリで使用している場合は、同一ファイル内のエントリが全て削除される
ので気をつけてください。

==============================================================================
4. エントリ一覧						*qfixmemo-entry-list*

エントリを一覧表示してメモにアクセス可能です。
基本はMRUリストを使用し、その他は必要に応じて使用してください。
l a A は外部grepを使用するのでMRUリストより速度的には遅くなります。

<Leader>m           MRUリスト
<Leader>l           最近更新したファイルのエントリ一覧
<Leader>a           全エントリ一覧
<Leader>ra          全エントリ一覧
<Leader>A           日記エントリ一覧
<Leader>rA          Globによる全ファイル一覧

Globの場合はタイトル行のないファイルも表示されます。

4.1 エントリ一覧のオプション				*qfixmemo-entry-list-option*

<Leader>mはカウント指定可能で 30<Leader>m だと表示数を30というように変更する事
ができます。
同様に<Leader>lでは更新日数の指定が可能です。
初期値は.vimrcでも設定できます。

.vimrc >
    " MRUの表示数
    let QFixMRU_Entries   = 20
    " 最近更新したエントリ一覧の日数
    let qfixmemo_RecentDays = 10

4.2 MRUリスト						*qfixmemo-entry-list-mru*

複数のPCでメモを共有する場合、MRUリストをqfixmemo_dirを基準とした相対パスで保存
しておくとqfixmemo_dirやOSが異なる環境でもMRUリストを共有する事ができます。
>
    " MRU保存ファイル名
    let QFixMRU_Filename  = '~/.qfixmru'
    " MRUの基準ディレクトリ
    let QFixMRU_RootDir   = qfixmemo_dir
<
4.3 全エントリ一覧					*qfixmemo-entry-list-all*

デフォルトでは <Leader>a と <Leader>ra に同じ「全エントリ一覧」がマップされて
います。
もしも全エントリ一覧を多用するなら <Leader>a に「エントリ一覧(キャッシュ表示)」
を割り当てると表示の際に再検索を行わないので高速に表示されます。 >
.vimrc >
    " <Leader>a にキャッシュ表示を割り当て
    function! QFixMemoKeymapPost()
      nnoremap <silent> <Leader>a       :<C-u>call qfixmemo#ListCache('open')<CR>
    endfunction

最初の一回だけ <Leader>raで「全エントリ一覧」を実行して、それ以降は <Leader>a
を使用するというように使います。
<Leader>aではキャッシュ表示されますが、最新の状態を取得したい場合は <Leader>ra
を再実行します。

==============================================================================
5. 検索							*qfixmemo-grep*

メモは全文検索が可能です。

<Leader>s           FGrep(固定文字列検索)
<Leader>g           Grep

内部的にはQFixGrepが呼び出されますので、詳しい設定等は以下を参照してください。
http://sites.google.com/site/fudist/Home/grep

------------------------------------------------------------------------------
5.1 Quickfixウィンドウの編集				*qfixmemo-quickfix-edit*

検索後のQuickfixウィンドウ上では絞り込みや編集が行えます。

s                   指定文字列で絞り込み
r                   指定文字列を'含まない'絞り込み
S                   名前順などのソート切替
dd,d(ビジュアル)    登録行の削除
u                   ソートや絞り込みのアンドゥ
U                   絞り込み全てをアンドゥ

------------------------------------------------------------------------------
5.2 エントリフィルタと連結表示				*qfixmemo-entry-filter*

@                   連結表示
#                   エントリフィルタ

たとえば全てのメモから「映画」について検索したとします。Quickfixウィンドウには
「映画」が含まれる行が全て表示されているはずです。

この時 # を押すと「表示されている行を含むエントリ一覧」を表示します。つまり
「映画」という文字が含まれるエントリ一覧として使用できるわけです。メモ自体には
カテゴリを設定していないのですが、これは「映画」というカテゴリ検索やタイトル検
索にかなり近い物といえます。

この状態で検索結果を @ コマンドで連結表示すると「映画カテゴリ」をまとめたメ
モが作成されます。

==============================================================================
6. ランダム表示						*qfixmemo-random*

何か機会がないと大抵のメモは読み返すことなく埋もれてしまいます。
雑多なアイディアメモを記録している場合などではランダム表示が有効です。

<Leader>rr          ランダム表示
<F5>                ランダム表示(Quickfixウィンドウ上のみ)
<Leader>rR          キャッシュをクリアしてランダム表示

.vimrc >
    " ランダム表示数
    let qfixmemo_random_columns = 10
    " ランダム表示のキャッシュファイル名
    let qfixmemo_random_file = '~/.qfixmemo-random'
    " 指定秒数が経過していたらキャッシュファイル再作成
    let qfixmemo_random_time = 10*24*60*60
    " ランダム表示から除きたいエントリの正規表現
    let qfixmemo_random_exclude = ''

特定のディレクトリのみからランダム表示用のエントリを検索したい場合は
qfixmemo_random_dirを設定します。
ランダム表示検索対象ディレクトリは以下のオプションの順番で設定されます。
  1 : qfixmemo_random_dir
  2 : qfixmemo_root_dir
  3 : qfixmemo_dir
  デフォルトでは1,2が設定されていないので qfixmemo_dirが使用されます

.vimrc >
    " ランダム表示検索対象ディレクトリ
    let qfixmemo_random_dir = '~/qfixmemo/random'

==============================================================================
7. フォールディング					*qfixmemo-folding*

一ファイル複数エントリの場合、フォールディングを使用すると見やすくなります。

<Leader>o           フォールディング切替

フォールディングパターンは qfixmemo_folding_pattern で定義され、
qfixmemo_foldingが 0 だと qfixmemoのフォールディングは無効化されます。 >
デフォルトでは行頭がタイトル記号かどうかで折りたたみます

.vimrc >
    let qfixmemo_folding         = 1
    let qfixmemo_folding_pattern = '^=[^=]'

フォールディング有効時の評価は QFixMemoFoldingLevel()で行われます。
.vimrc等でQFixMemoFoldingLevel()を定義すると、そちらが優先されるので必要なら好
みの関数を作成してください。
デフォルトでは以下の関数と同等の式が評価されます。

.vimrc >
    " フォールディングレベル計算
    function! QFixMemoFoldingLevel(lnum)
      return getline(a:lnum) =~ g:qfixmemo_folding_pattern ? '>1' : '1'
    endfunction

==============================================================================
8. ローカルバッファコマンド				*qfixmemo-local-commands*

<LocalLeader>P      現バッファの先頭にエントリ追加
<LocalLeader>p      カーソル位置のエントリ前にエントリ追加
<LocalLeader>n      カーソル位置のエントリ後にエントリ追加
<LocalLeader>N      現バッファの最後にエントリ追加

<LocalLeader>f      固定文字列検索
<LocalLeader>e      Grep

<LocalLeader>rs     タイムスタンプ基準のエントリソート(降順)
<LocalLeader>rS     タイムスタンプ基準のエントリソート(昇順)
<LocalLeader>S      カーソル位置のエントリのタイムスタンプを更新

<LocalLeader>x      カーソル位置のエントリ削除
<LocalLeader>X      カーソル位置のエントリを新規ファイルへ移動
<LocalLeader>W      現バッファの全エントリを個別に新規ファイルへ移動

<LocalLeader>rn     ファイル名変更

<LocalLeader>w      強制保存(保存前処理は実行されない)

==============================================================================
9. ファイルリネーム					*qfixmemo-rename*

g,rN を実行するとqfixmemo_dir内のメモファイルをまとめて「タイトル行から生成し
たファイル名」にリネームすることが出来ます。
デフォルトのメモはファイル名で中身が推測できないので、他のテキストエディタ等で
使用しにくい場合などに使用します。

一括リネームの対象となるのはqfixmemo_filenameで指定した形式のファイル名のみで
(例 : %Y-%m-%d-%H%M%S.txt)、日記とペアファイルは対象外になります。

    1. g,rN を実行すると「現ファイル名」と「新ファイル名」が表示されます。
    2. ddで不要な行を削除します
    3. 編集し終わったら <C-g> か ! を押すと一括リネームが始まります。
    4. ファイル名が重複している場合は、重複したファイルのみリストに残ります。
    5. 残ったリストの「新ファイル名」部分を編集します。
    6. 2.に戻り変換を繰り返します。

変換候補一覧は普通のバッファのように編集可能で、「新ファイル名候補」が重複して
いたり、気に入らない場合に適当に編集可能です。ソートや絞り込み検索等は「通常の
全エントリ一覧」とほぼ同じコマンドが有効です。

なお i は通常の編集コマンドとして使用するので、プレビューのON/OFFが必要な場合
は I でトグルを実行してください。

"NOTE"
バックアップを取った上で何度か実行してみる事をおすすめします。

==============================================================================
10. 予定・TODO						*qfixmemo-schedule*

予定・TODOはQFixHowmと互換でオプションも同一です。

予定・TODOの使い方:
https://sites.google.com/site/fudist/Home/qfixhowm/howm-reminder

g,y                 予定
g,ry                予定(更新)
g,t                 Todo
g,rt                Todo(更新)
g,,                 メニュー
g,r,                メニュー(更新)
g,d                 日付の挿入
g,T                 日付と時刻の挿入
g,rd                繰り返しの展開

==============================================================================
11. カスタマイズ						*qfixmemo-customize*

この章で解説されるキーマップや各種イベントのユーザ定義用関数は
qfixmemo/misc/user-func.vim にまとめてあります。
独自処理を付加したい場合は user-func.vim を pluginディレクトリにコピーして使用
して下さい。

------------------------------------------------------------------------------
11.1 新規メモのテンプレート					*qfixmemo-template*

新規メモのテンプレートは変更可能です。
.vimrc >
    let g:qfixmemo_template = [
      \'%TITLE% ',
      \""
    \]

テンプレート        置換オプション
%TITLE%             qfixmemo_title
%DATE%              qfixmemo_timeformat
%TAG%               qfixmemo_template_tag

テンプレートは |strftime()|で整形されるのであらかじめタイムスタンプを埋め込む
ことも出来ます。
.vimrc >
    let g:qfixmemo_template = [
      \'%TITLE% ',
      \'[%Y-%m-%d %H:%M]',
      \""
    \]

------------------------------------------------------------------------------
11.1.2 タイトルマーカーとタイトル検索の正規表現		*qfixmemo-title*

タイトルマーカーを変更することも可能です。 >
    let qfixmemo_title    = '#'
<
タイトルマーカーを変更した場合はタイトル検索正規表現の変更が必要になることがあ
ります。

------------------------------------------------------------------------------
11.1.3 タイトル検索の正規表現				*qfixmemo-title-regxp*

外部grepを利用してエントリ一覧表示を行う際の正規表現は、使用するgrepの正規表現
に依存するため、環境に合わせた設定が必要になることがあります。
正規表現は QFixMRU_Title[]に「拡張子+_regxp」で設定します。

必要ならQFixMemoのタイトル検索用正規表現は QFixMemoTitleRegxp()で独自設定して
ください。

タイトルマーカーに ### を使いたい場合。
.vimrc >
    " タイトルマーカー
    let qfixmemo_title    = '###'

    " タイトル行検索の正規表現
    function! QFixMemoTitleRegxp()
      let g:QFixMRU_Title[g:qfixmemo_ext]            = '^###[^#]'
      let g:QFixMRU_Title[g:qfixmemo_ext . '_regxp'] = '^###[^#]'
    endfunction
<
デフォルトの外部grep検索用正規表現は、正規表現が貧弱なfindstrでも共通に使えるよ
うに「行頭のタイトルマーカー」の後に「タイトルマーカー以外の文字」がある行をタ
イトル行として検索するよう設定されています。

------------------------------------------------------------------------------
11.2 キーマップ						*qfixmemo-user-keymap*

独自キーマップは .vimrc等に QFixMemoKeymapPost() を作成する事で変更可能です。

.vimrc >
    " キーマップ
    function! QFixMemoKeymapPost()
      nnoremap <silent> <Leader>a :<C-u>call qfixmemo#ListCache('open')<CR>
    endfunction

    " ローカルキーマップ
    function! QFixMemoLocalKeymapPost()
      nnoremap <silent> <buffer> <LocalLeader>f :<C-u>call qfixmemo#FGrep()<CR>
    endfunction

拡張子まで含めて指定ファイルを開く

拡張子がqfixmemo_extのファイルではなく、拡張子まで含めた指定ファイルを開くには
qfixmemo#EditFile() を使用します。
g,Jで qfixmemo_dir/example.nvl を開く例 >
    nnoremap <silent> <Leader>J :<C-u>call qfixmemo#EditFile('example.nvl')<CR>

------------------------------------------------------------------------------
11.3 保存前処理						*qfixmemo-pre-save*

保存前にタイトル行とタイムスタンプの付加とファイル末の空行削除等が行われます。
保存前処理は .vimrc等に QFixMemoBufWritePre() を作成する事で変更可能です。

.vimrc >
    " BufWritePre
    function! QFixMemoBufWritePre()
      " タイトル行付加
      call qfixmemo#AddTitle()
      " タイムスタンプ付加
      call qfixmemo#AddTime()
      " タイムスタンプアップデート
      " call qfixmemo#UpdateTime()
      " Wikiスタイルのキーワードリンク作成
      call qfixmemo#AddKeyword()
      " ファイル末の空行を削除
      call qfixmemo#DeleteNullLines()
    endfunction
<
qfixmemo#UpdateTime()を有効にすると、保存の度にカーソル位置のエントリのタイムス
タンプが更新されます。

------------------------------------------------------------------------------
11.4 ファイルタイプの指定				*qfixmemo-filetype*

メモファイルに使用するシンタックスハイライトはファイルタイプ指定で変更可能です。

Markdownを使用する例 >
    " ファイルタイプ
    let qfixmemo_filetype  = 'markdown'

通常はqfixmemo_filetype指定で使用してください。

またメモファイルの拡張子を txt以外に変更しても拡張子に対応したシンタックスハイ
ライトが有効になります。
この場合は指定拡張子のファイルタイプを有効にするため qfixmemoのファイルタイプ指
定を無効にしてください。

Markdownを使用する例 >
    " メモファイルの拡張子
    let qfixmemo_ext      = 'mkd'
    " qfixmemoのファイルタイプ指定を無効
    let qfixmemo_filetype = ''

ファイルタイプは明示的に指定してもかまいません。

なお拡張子を howm,txt,mkd,wiki以外にする場合は、ファイルがMRUリストに登録されるよ
うに設定して下さい。 >
    " MRUに登録するファイル名の正規表現
    let QFixMRU_RegisterFile = '\.\(howm\|txt\|mkd\|wiki\)$'

------------------------------------------------------------------------------
11.5 シンタックスハイライト				*qfixmemo-syntax-highlight*

デフォルトで有効になるシンタックスハイライトは qfixmemo_syntaxで設定します。 >
    " QFixMemoシンタックスハイライト設定
    let g:qfixmemo_syntax = 3

0                   何も設定しない
1                   タイトル行
2                   タイトル行、タイムスタンプ
3                   タイトル行、タイムスタンプ、予定・TODO

デフォルト以外のファイルタイプに設定していてハイライトが邪魔な場合は無効化して
ください。

------------------------------------------------------------------------------
11.6 複数のQFixMemoディレクトリ				*qfixmemo-chenv*

複数のQFixMemoディレクトリを切り替えて使いたい場合は単純に qfixmemo_dirを変更
します。
同様にディレクトリごとにファイルタイプを変更したい場合も単純に
qfixmemo_filetypeを変更してください。

QFixHowmの環境変更用スクリプト互換の qfixmemo-chenv.vimもあります。
qfixmemo/misc/qfixmemo-chenv.vim をpluginディレクトリにコピーして、.vimrcにオ
プション設定を追加してください。
使い方については以下を参照してください。
http://sites.google.com/site/fudist/Home/qfixhowm/option/multi-howm-dir#howm-chenv

.vimrc >
    " qfixmemo-chenv.vimの基準ディレクトリ設定
    let qfixmemo_chdir = qfixmemo_dir

    function! QFixMemoKeymapPost()
      nnoremap <silent> <leader>hh :echo qfixmemo_dir<CR>
      nnoremap <silent> <leader>ha :call QFixMemoChEnv("",         "time", "=")<CR>
      nnoremap <silent> <leader>hm :call QFixMemoChEnv("main",     "time", "=")<CR>
      nnoremap <silent> <leader>hd :call QFixMemoChEnv("howm-mkd", "time", "#")<CR>
      nnoremap <silent> <leader>hc :call QFixMemoChEnv("pc",       "time", "= [:pc]")<CR>
      nnoremap <silent> <leader>hv :call QFixMemoChEnv("vimwiki",  "time", "=")<CR>
      nnoremap <silent> <leader>hw :call QFixMemoChEnv("work",     "day",  "=")<CR>
    endfunction
<
上記の設定では以下のようになります。

- g,hh で現在の環境を表示します。
- g,hm と g,hc は一エントリ一ファイルで g,hw では一日一ファイルで実行します。
- g,hc の時はタイトルにカテゴリタグ '= [:pc] ' を常に付加します。
- g,ha では全てのエントリを検索することが出来ます。

デフォルトではファイル名とファイルタイプ設定しか変更しないので、より細かい設定
を行いたい場合は qfixmemo-chenv.vimを改変してください。

------------------------------------------------------------------------------
11.7 calendar.vim					*qfixmemo-calendar*

calendar.vimでQFixMemoの日記を使用することが出来ます。
qfixmemo/misc/qfixmemo-calendar.vim をpluginディレクトリにコピーして、.vimrcに
オプション設定を追加してください。

.vimrc >
    let calendar_action = "QFixMemoCalendarDiary"
    let calendar_sign   = "QFixMemoCalendarSign"

vim:tw=78:ts=8:ft=qfix_memo.help:norl

